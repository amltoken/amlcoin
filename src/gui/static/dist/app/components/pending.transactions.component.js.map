{"version":3,"sources":["app/components/pending.transactions.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;YAuCA;gBAGE,8BAAoB,mBAA6C;oBAA7C,wBAAmB,GAAnB,mBAAmB,CAA0B;gBAAE,CAAC;gBAIpE,8CAAe,GAAf;oBACE,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBAC5B,CAAC;gBAED,iDAAkB,GAAlB;oBAAA,iBASC;oBARC,IAAI,CAAC,mBAAmB,CAAC,sBAAsB,EAAE,CAAC,SAAS,CAAC,UAAA,WAAW;wBAEjE,KAAI,CAAC,YAAY,GAAG,WAAW,CAAC;oBAClC,CAAC,EACD,UAAA,GAAG;wBACD,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBACnB,CAAC,CACJ,CAAC;gBACJ,CAAC;gBACD,gDAAiB,GAAjB,UAAkB,EAAE;oBAClB,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAA;gBAC9C,CAAC;gBACD,4CAAa,GAAb;oBAAA,iBAIC;oBAHC,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,EAAE,CAAC,SAAS,CAAC;wBACrD,KAAI,CAAC,kBAAkB,EAAE,CAAC;oBAC5B,CAAC,CAAC,CAAC;gBACL,CAAC;gBA/DH;oBAAC,gBAAS,CAAC;wBACT,QAAQ,EAAE,sBAAsB;wBAChC,QAAQ,EAAE,8gDA4BG;wBAEb,SAAS,EAAC,CAAC,uDAAyB,CAAC;qBACtC,CAAC;;wCAAA;gBA+BF,2BAAC;YAAD,CA7BA,AA6BC,IAAA;YA7BD,uDA6BC,CAAA","file":"pending.transactions.component.js","sourcesContent":["import { Component, AfterViewInit} from \"@angular/core\";\nimport {PendingTransactionService} from \"../services/pending.transaction.service\";\ndeclare var moment: any;\n\n@Component({\n  selector: 'pending-transactions',\n  template: `\n<button class=\"btn btn-default right\" type=\"button\" (click)=\"sendExecution()\" >Resend for execution</button>\n<div class=\"table-responsive\">\n                  <table id=\"pending-table\" class=\"table\">\n                            <tbody>\n                            <tr class=\"dark-row\">\n                                <td>S. No</td>\n                                <td>Time received</td>\n                                <td>Transaction ID</td>\n                                <td>Inputs</td>\n                                <td>Outputs</td>\n                                <td>Amount</td>\n                            </tr>\n                            <tr *ngFor=\"let transaction of transactions;let i=index\">\n                                <td>{{i+1}}</td>\n                                <td>{{getDateTimeString(transaction.received)}}</td>\n                                <td>{{transaction.transaction.txid}}</td>\n                                <td>\n                                <p *ngFor=\"let input of transaction.transaction.inputs\">{{input}},<br></p>\n</td>\n                                <td>\n                                <p *ngFor=\"let output of transaction.transaction.outputs\">{{output.dst}},<br></p>\n</td>\n                                <td><p *ngFor=\"let output of transaction.transaction.outputs\">{{output.coins}},<br></p></td>\n                            </tr>\n                            </tbody>\n                        </table>\n                        </div>\n              `\n  ,\n  providers:[PendingTransactionService]\n})\n\nexport class PendingTxnsComponent implements AfterViewInit {\n\n\n  constructor(private _pendingTxnsService:PendingTransactionService){}\n\n  transactions:any[];\n\n  ngAfterViewInit(): any {\n    this.refreshPendingTxns();\n  }\n\n  refreshPendingTxns():any{\n    this._pendingTxnsService.getPendingTransactions().subscribe(pendingTxns=>\n        {\n          this.transactions = pendingTxns;\n        },\n        err => {\n          console.log(err);\n        }\n    );\n  }\n  getDateTimeString(ts) {\n    return moment(ts).format(\"YYYY-MM-DD HH:mm\")\n  }\n  sendExecution():void{\n    this._pendingTxnsService.resendPendingTxns().subscribe(()=>{\n      this.refreshPendingTxns();\n    });\n  }\n}\n\n"]}